// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/offline/fcm_token.dart';
import 'data/offline/notification.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1442261930213896533),
      name: 'AppNotification',
      lastPropertyId: const IdUid(5, 4512449201745543042),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5410755680890526064),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7152179815247551696),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1025401668358804600),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6160081685224871144),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4512449201745543042),
            name: 'redirectionID',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2264238530504084454),
      name: 'FcmToken',
      lastPropertyId: const IdUid(3, 1505162109013037546),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6294106010597321393),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6886320678206257150),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1505162109013037546),
            name: 'token',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 2264238530504084454),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AppNotification: EntityDefinition<AppNotification>(
        model: _entities[0],
        toOneRelations: (AppNotification object) => [],
        toManyRelations: (AppNotification object) => {},
        getId: (AppNotification object) => object.id,
        setId: (AppNotification object, int id) {
          object.id = id;
        },
        objectToFB: (AppNotification object, fb.Builder fbb) {
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final messageOffset = fbb.writeString(object.message);
          final dateOffset = fbb.writeString(object.date);
          final redirectionIDOffset = fbb.writeString(object.redirectionID);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imageOffset);
          fbb.addOffset(2, messageOffset);
          fbb.addOffset(3, dateOffset);
          fbb.addOffset(4, redirectionIDOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppNotification(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              message: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              date: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              redirectionID: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''));

          return object;
        }),
    FcmToken: EntityDefinition<FcmToken>(
        model: _entities[1],
        toOneRelations: (FcmToken object) => [],
        toManyRelations: (FcmToken object) => {},
        getId: (FcmToken object) => object.id,
        setId: (FcmToken object, int id) {
          object.id = id;
        },
        objectToFB: (FcmToken object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          final tokenOffset = fbb.writeString(object.token);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, tokenOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FcmToken(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              token: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AppNotification] entity fields to define ObjectBox queries.
class AppNotification_ {
  /// see [AppNotification.id]
  static final id =
      QueryIntegerProperty<AppNotification>(_entities[0].properties[0]);

  /// see [AppNotification.image]
  static final image =
      QueryStringProperty<AppNotification>(_entities[0].properties[1]);

  /// see [AppNotification.message]
  static final message =
      QueryStringProperty<AppNotification>(_entities[0].properties[2]);

  /// see [AppNotification.date]
  static final date =
      QueryStringProperty<AppNotification>(_entities[0].properties[3]);

  /// see [AppNotification.redirectionID]
  static final redirectionID =
      QueryStringProperty<AppNotification>(_entities[0].properties[4]);
}

/// [FcmToken] entity fields to define ObjectBox queries.
class FcmToken_ {
  /// see [FcmToken.id]
  static final id = QueryIntegerProperty<FcmToken>(_entities[1].properties[0]);

  /// see [FcmToken.userId]
  static final userId =
      QueryStringProperty<FcmToken>(_entities[1].properties[1]);

  /// see [FcmToken.token]
  static final token =
      QueryStringProperty<FcmToken>(_entities[1].properties[2]);
}
